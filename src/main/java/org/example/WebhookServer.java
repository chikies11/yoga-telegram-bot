package org.example;

import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;

public class WebhookServer {
    public static void main(String[] args) {
        System.out.println("üöÄ Starting Yoga Telegram Bot (Long Polling)...");

        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
            startHealthCheckServer();

            // –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            YogaManagerBot bot = new YogaManagerBot();
            botsApi.registerBot(bot);

            System.out.println("‚úÖ Bot successfully registered!");
            System.out.println("ü§ñ Username: " + bot.getBotUsername());
            System.out.println("‚è∞ Bot is now listening for messages...");

            // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª–æ—Å—å
            while (true) {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    break;
                }
            }

        } catch (TelegramApiException e) {
            System.err.println("‚ùå Error initializing bot: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void startHealthCheckServer() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç PORT)
            String portStr = System.getenv("PORT");
            int port = (portStr != null && !portStr.isEmpty()) ? Integer.parseInt(portStr) : 8080;

            HttpServer server = HttpServer.create(new InetSocketAddress(port), 0);

            // Health check endpoint
            server.createContext("/health", new HttpHandler() {
                @Override
                public void handle(HttpExchange exchange) throws IOException {
                    String response = "{\"status\":\"ok\",\"service\":\"yoga-telegram-bot\"}";
                    exchange.getResponseHeaders().set("Content-Type", "application/json");
                    exchange.sendResponseHeaders(200, response.getBytes().length);

                    OutputStream os = exchange.getResponseBody();
                    os.write(response.getBytes());
                    os.close();
                }
            });

            // Root endpoint
            server.createContext("/", new HttpHandler() {
                @Override
                public void handle(HttpExchange exchange) throws IOException {
                    String response = "Yoga Telegram Bot is running! üßò‚Äç‚ôÄÔ∏è";
                    exchange.getResponseHeaders().set("Content-Type", "text/plain");
                    exchange.sendResponseHeaders(200, response.getBytes().length);

                    OutputStream os = exchange.getResponseBody();
                    os.write(response.getBytes());
                    os.close();
                }
            });

            server.setExecutor(null);
            server.start();

            System.out.println("‚úÖ Health check server started on port " + port);
            System.out.println("üåê Health check URL: http://0.0.0.0:" + port + "/health");

        } catch (IOException e) {
            System.err.println("‚ùå Failed to start health check server: " + e.getMessage());
        }
    }
}