package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

public class YogaManagerBot extends TelegramLongPollingBot {

    // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
    private static final String[][] SCHEDULE = {
            {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å"},
            {"–í—Ç–æ—Ä–Ω–∏–∫", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "18:30-20:00 - LED-–∫–ª–∞—Å—Å"},
            {"–°—Ä–µ–¥–∞", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "18:30-20:00 - LED-–∫–ª–∞—Å—Å"},
            {"–ß–µ—Ç–≤–µ—Ä–≥", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - LED-–∫–ª–∞—Å—Å"},
            {"–ü—è—Ç–Ω–∏—Ü–∞", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - LED-–∫–ª–∞—Å—Å"},
            {"–°—É–±–±–æ—Ç–∞", "–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π", ""},
            {"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "10:00-11:30 - LED-–∫–ª–∞—Å—Å", ""}
    };

    @Override
    public String getBotUsername() {
        return "yoga_manager_bot";
    }

    @Override
    public String getBotToken() {
        String token = System.getenv("BOT_TOKEN");
        if (token == null || token.isEmpty()) {
            token = "dummy-token-for-testing";
            System.err.println("‚ö†Ô∏è BOT_TOKEN not set, using dummy token");
        }
        return token;
    }

    @Override
    public void onUpdateReceived(Update update) {
        System.out.println("üéØ Update received!");

        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                String messageText = update.getMessage().getText();
                long chatId = update.getMessage().getChatId();
                String userName = update.getMessage().getFrom().getUserName();

                System.out.println("üì® Message: '" + messageText + "' from: @" + userName + " (" + chatId + ")");

                switch (messageText) {
                    case "/start":
                        sendWelcomeMessage(chatId);
                        break;
                    case "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                        sendFullSchedule(chatId);
                        break;
                    case "–°–µ–≥–æ–¥–Ω—è":
                        sendTodaySchedule(chatId);
                        break;
                    case "–ó–∞–≤—Ç—Ä–∞":
                        sendTomorrowSchedule(chatId);
                        break;
                    case "–¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
                        sendTestReminder(chatId);
                        break;
                    default:
                        sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:");
                }

                System.out.println("‚úÖ Response sent successfully");
            }
        } catch (Exception e) {
            System.err.println("‚ùå Error processing message: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void sendWelcomeMessage(long chatId) throws TelegramApiException {
        String text = "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –π–æ–≥–∞-–∑–∞–Ω—è—Ç–∏–π! üßò‚Äç‚ôÄÔ∏è\n\n" +
                "–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å:\n" +
                "‚Ä¢ üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\n" +
                "‚Ä¢ üîî –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö\n" +
                "‚Ä¢ üìã –£–∑–Ω–∞—Ç—å –æ –∑–∞–Ω—è—Ç–∏—è—Ö —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞\n\n" +
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:";
        sendMessageWithKeyboard(chatId, text);
    }

    private void sendFullSchedule(long chatId) throws TelegramApiException {
        StringBuilder sb = new StringBuilder();
        sb.append("üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n\n");

        for (String[] day : SCHEDULE) {
            sb.append(day[0]).append(":\n");
            if (!day[1].isEmpty()) sb.append("‚Ä¢ ").append(day[1]).append("\n");
            if (!day[2].isEmpty()) sb.append("‚Ä¢ ").append(day[2]).append("\n");
            if (day[1].isEmpty() && day[2].isEmpty()) sb.append("‚Ä¢ –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π\n");
            sb.append("\n");
        }

        sendMessage(chatId, sb.toString());
    }

    private void sendTodaySchedule(long chatId) throws TelegramApiException {
        int todayIndex = getDayOfWeekIndex(Calendar.getInstance());
        String schedule = formatDaySchedule(todayIndex);
        String message = "üìã –°–µ–≥–æ–¥–Ω—è (" + SCHEDULE[todayIndex][0] + "):\n\n" + schedule;
        sendMessage(chatId, message);
    }

    private void sendTomorrowSchedule(long chatId) throws TelegramApiException {
        Calendar tomorrow = Calendar.getInstance();
        tomorrow.add(Calendar.DAY_OF_MONTH, 1);
        int tomorrowIndex = getDayOfWeekIndex(tomorrow);
        String schedule = formatDaySchedule(tomorrowIndex);
        String message = "üìã –ó–∞–≤—Ç—Ä–∞ (" + SCHEDULE[tomorrowIndex][0] + "):\n\n" + schedule;
        sendMessage(chatId, message);
    }

    private void sendTestReminder(long chatId) throws TelegramApiException {
        sendMessage(chatId, "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.");
    }

    private String formatDaySchedule(int dayIndex) {
        String[] day = SCHEDULE[dayIndex];
        StringBuilder sb = new StringBuilder();

        if (!day[1].isEmpty() && !day[1].equals("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π")) {
            sb.append("‚Ä¢ ").append(day[1]).append("\n");
        }
        if (!day[2].isEmpty() && !day[2].equals("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π")) {
            sb.append("‚Ä¢ ").append(day[2]).append("\n");
        }
        if (sb.length() == 0) {
            sb.append("‚Ä¢ –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π\n");
        }

        return sb.toString();
    }

    private int getDayOfWeekIndex(Calendar calendar) {
        int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
        return (dayOfWeek + 5) % 7;
    }

    private void sendMessage(long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        execute(message);
    }

    private void sendMessageWithKeyboard(long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(createMainKeyboard());
        execute(message);
    }

    private ReplyKeyboardMarkup createMainKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
        row1.add("–°–µ–≥–æ–¥–Ω—è");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ó–∞–≤—Ç—Ä–∞");
        row2.add("–¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è");

        keyboard.add(row1);
        keyboard.add(row2);

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        return keyboardMarkup;
    }

    @Override
    public void onUpdatesReceived(List<Update> updates) {
        for (Update update : updates) {
            onUpdateReceived(update);
        }
    }
}