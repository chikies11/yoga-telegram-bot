package org.example;

import org.telegram.telegrambots.bots.TelegramWebhookBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

public class YogaManagerBot extends TelegramWebhookBot {

    private String CHANNEL_ID;
    private String BOT_TOKEN;
    private String BOT_PATH;
    private Timer reminderTimer;

    // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
    private static final String[][] SCHEDULE = {
            {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å"},
            {"–í—Ç–æ—Ä–Ω–∏–∫", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "18:30-20:00 - LED-–∫–ª–∞—Å—Å"},
            {"–°—Ä–µ–¥–∞", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "18:30-20:00 - LED-–∫–ª–∞—Å—Å"},
            {"–ß–µ—Ç–≤–µ—Ä–≥", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - LED-–∫–ª–∞—Å—Å"},
            {"–ü—è—Ç–Ω–∏—Ü–∞", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - LED-–∫–ª–∞—Å—Å"},
            {"–°—É–±–±–æ—Ç–∞", "–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π", ""},
            {"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "10:00-11:30 - LED-–∫–ª–∞—Å—Å", ""}
    };

    public YogaManagerBot() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            this.BOT_TOKEN = System.getenv("BOT_TOKEN");
            this.CHANNEL_ID = System.getenv("CHANNEL_ID");

            // –ü–æ–ª—É—á–∞–µ–º BOT_PATH —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            String botPathEnv = System.getenv("BOT_PATH");
            this.BOT_PATH = (botPathEnv == null || botPathEnv.isEmpty()) ?
                    "yoga-bot-webhook" : botPathEnv;

            // –ú—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if (BOT_TOKEN == null || BOT_TOKEN.isEmpty()) {
                System.err.println("‚ö†Ô∏è WARNING: BOT_TOKEN not set");
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                this.BOT_TOKEN = "dummy-token-for-testing";
            }

            if (CHANNEL_ID == null || CHANNEL_ID.isEmpty()) {
                System.err.println("‚ö†Ô∏è WARNING: CHANNEL_ID not set");
                this.CHANNEL_ID = "@test_channel";
            }

            System.out.println("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            System.out.println("üì¢ –ö–∞–Ω–∞–ª: " + CHANNEL_ID);
            System.out.println("üåê Webhook –ø—É—Ç—å: " + BOT_PATH);

            startReminderScheduler();

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –±–æ—Ç–∞: " + e.getMessage());
            e.printStackTrace();
            // –ù–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        }
    }

    @Override
    public String getBotUsername() {
        return "yoga_manager_bot";
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }

    @Override
    public String getBotPath() {
        return BOT_PATH;
    }

    @Override
    public BotApiMethod<?> onWebhookUpdateReceived(Update update) {
        System.out.println("=== NEW WEBHOOK UPDATE ===");
        System.out.println("Update ID: " + update.getUpdateId());

        try {
            // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ update
            if (update.hasMessage()) {
                System.out.println("üì® Message received from: " + update.getMessage().getFrom().getUserName());
                System.out.println("üí¨ Text: " + update.getMessage().getText());
                System.out.println("üÜî Chat ID: " + update.getMessage().getChatId());
            }

            if (update.hasCallbackQuery()) {
                System.out.println("üìã Callback query: " + update.getCallbackQuery().getData());
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (update.hasMessage() && update.getMessage().hasText()) {
                String messageText = update.getMessage().getText();
                long chatId = update.getMessage().getChatId();

                System.out.println("üîß Processing message: " + messageText);

                switch (messageText) {
                    case "/start":
                        return createSimpleMessage(chatId, getWelcomeMessage());
                    case "Reminder":
                        return createSimpleMessage(chatId, getReminderInfo());
                    case "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                        return createSimpleMessage(chatId, getFullScheduleText());
                    case "–°–µ–≥–æ–¥–Ω—è":
                        return createSimpleMessage(chatId, getTodaySchedule());
                    case "–ó–∞–≤—Ç—Ä–∞":
                        return createSimpleMessage(chatId, getTomorrowScheduleForUser());
                    case "–¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
                        sendTestReminder();
                        return createSimpleMessage(chatId, "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!");
                    default:
                        return createSimpleMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:");
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
            else if (update.hasCallbackQuery()) {
                String callbackData = update.getCallbackQuery().getData();
                long chatId = update.getCallbackQuery().getMessage().getChatId();
                return createSimpleMessage(chatId, "Callback received: " + callbackData);
            }

            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            else {
                System.out.println("üîç Unhandled update type");
                if (update.hasMessage()) {
                    return createSimpleMessage(update.getMessage().getChatId(),
                            "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üòä");
                }
            }

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook update: " + e.getMessage());
            e.printStackTrace();

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try {
                if (update.hasMessage()) {
                    return createSimpleMessage(update.getMessage().getChatId(),
                            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞");
                } else if (update.hasCallbackQuery()) {
                    return createSimpleMessage(update.getCallbackQuery().getMessage().getChatId(),
                            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback");
                }
            } catch (Exception ex) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: " + ex.getMessage());
            }
        }

        return null;
    }

    private SendMessage createSimpleMessage(long chatId, String text) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText(text);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            message.setReplyMarkup(createMainKeyboard());

            return message;
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
            return null;
        }
    }

    private String getWelcomeMessage() {
        return "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –π–æ–≥–∞-–∑–∞–Ω—è—Ç–∏–π! üßò‚Äç‚ôÄÔ∏è\n\n" +
                "–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å:\n" +
                "‚Ä¢ üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n" +
                "‚Ä¢ üîî –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n" +
                "‚Ä¢ üìã –£–∑–Ω–∞—Ç—å –æ –∑–∞–Ω—è—Ç–∏—è—Ö —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞\n\n" +
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:";
    }

    private String getReminderInfo() {
        return "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n" +
                "–Ø –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –∑–∞ 24 —á–∞—Å–∞ –¥–æ –∑–∞–Ω—è—Ç–∏–π.\n" +
                "–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + getNextReminderTime();
    }

    private String getFullScheduleText() {
        StringBuilder sb = new StringBuilder();
        sb.append("üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n\n");
        for (String[] day : SCHEDULE) {
            sb.append(day[0]).append(":\n");
            if (!day[1].isEmpty()) {
                sb.append("‚Ä¢ ").append(day[1]).append("\n");
            }
            if (!day[2].isEmpty()) {
                sb.append("‚Ä¢ ").append(day[2]).append("\n");
            }
            if (day[1].isEmpty() && day[2].isEmpty()) {
                sb.append("‚Ä¢ –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π\n");
            }
            sb.append("\n");
        }
        return sb.toString();
    }

    private String getTodaySchedule() {
        int todayIndex = getDayOfWeekIndex(Calendar.getInstance());
        String schedule = getDaySchedule(todayIndex);
        return "üìã –°–µ–≥–æ–¥–Ω—è (" + SCHEDULE[todayIndex][0] + "):\n\n" + schedule;
    }

    private String getTomorrowScheduleForUser() {
        Calendar tomorrow = Calendar.getInstance();
        tomorrow.add(Calendar.DAY_OF_MONTH, 1);
        int tomorrowIndex = getDayOfWeekIndex(tomorrow);
        String schedule = getDaySchedule(tomorrowIndex);
        return "üìã –ó–∞–≤—Ç—Ä–∞ (" + SCHEDULE[tomorrowIndex][0] + "):\n\n" + schedule;
    }

    private String getDaySchedule(int dayIndex) {
        String[] day = SCHEDULE[dayIndex];
        StringBuilder sb = new StringBuilder();

        if (!day[1].isEmpty() && !day[1].equals("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π")) {
            sb.append("‚Ä¢ ").append(day[1]).append("\n");
        }
        if (!day[2].isEmpty() && !day[2].equals("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π")) {
            sb.append("‚Ä¢ ").append(day[2]).append("\n");
        }
        if (sb.length() == 0) {
            sb.append("‚Ä¢ –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π\n");
        }

        return sb.toString();
    }

    private void sendTestReminder() {
        try {
            String tomorrowSchedule = getTomorrowSchedule();
            String testReminder;

            if (tomorrowSchedule.contains("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ!!! –û—Ç–¥—ã—Ö")) {
                testReminder = "üîî –¢–ï–°–¢: –ó–∞–≤—Ç—Ä–∞ –æ—Ç–¥—ã—Ö!\n\n" +
                        tomorrowSchedule +
                        "\n\n–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–º –¥–Ω—ë–º! üåà";
            } else {
                testReminder = "üîî –¢–ï–°–¢: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö!\n\n" +
                        tomorrowSchedule +
                        "\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è! üßò‚Äç‚ôÄÔ∏è";
            }

            sendMessageToChannel(testReminder);
            System.out.println("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: " + e.getMessage());
        }
    }

    private ReplyKeyboardMarkup createMainKeyboard() {
        try {
            ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
            List<KeyboardRow> keyboard = new ArrayList<>();

            KeyboardRow row1 = new KeyboardRow();
            row1.add("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
            row1.add("–°–µ–≥–æ–¥–Ω—è");

            KeyboardRow row2 = new KeyboardRow();
            row2.add("–ó–∞–≤—Ç—Ä–∞");
            row2.add("Reminder");

            KeyboardRow row3 = new KeyboardRow();
            row3.add("–¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è");

            keyboard.add(row1);
            keyboard.add(row2);
            keyboard.add(row3);

            keyboardMarkup.setKeyboard(keyboard);
            keyboardMarkup.setResizeKeyboard(true);
            keyboardMarkup.setOneTimeKeyboard(false);

            return keyboardMarkup;
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: " + e.getMessage());
            return null;
        }
    }

    private int getDayOfWeekIndex(Calendar calendar) {
        int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
        return (dayOfWeek + 5) % 7;
    }

    private void startReminderScheduler() {
        try {
            reminderTimer = new Timer();

            Calendar time = Calendar.getInstance();
            time.set(Calendar.HOUR_OF_DAY, 9);
            time.set(Calendar.MINUTE, 0);
            time.set(Calendar.SECOND, 0);

            if (time.before(Calendar.getInstance())) {
                time.add(Calendar.DAY_OF_MONTH, 1);
            }

            System.out.println("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞: " + time.getTime());

            reminderTimer.schedule(new TimerTask() {
                @Override
                public void run() {
                    try {
                        checkAndSendReminders();
                    } catch (Exception e) {
                        System.err.println("‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: " + e.getMessage());
                    }
                }
            }, time.getTime(), 24 * 60 * 60 * 1000);
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: " + e.getMessage());
        }
    }

    private String getNextReminderTime() {
        Calendar now = Calendar.getInstance();
        Calendar next = Calendar.getInstance();
        next.set(Calendar.HOUR_OF_DAY, 9);
        next.set(Calendar.MINUTE, 0);
        next.set(Calendar.SECOND, 0);

        if (next.before(now)) {
            next.add(Calendar.DAY_OF_MONTH, 1);
        }

        return String.format("%02d:%02d", next.get(Calendar.HOUR_OF_DAY), next.get(Calendar.MINUTE));
    }

    private void checkAndSendReminders() {
        try {
            String tomorrowSchedule = getTomorrowSchedule();

            if (tomorrowSchedule.contains("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ!!! –û—Ç–¥—ã—Ö")) {
                String restMessage = "üéâ –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –¥–Ω—ë–º –æ—Ç–¥—ã—Ö–∞!\n\n" +
                        "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ!!! –û—Ç–¥—ã—Ö - –¥—Ä—É–≥ —á–µ–ª–æ–≤–µ–∫–∞! üéâ\n" +
                        "–ó–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç - –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º! üòä";

                sendMessageToChannel(restMessage);
                System.out.println("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç–¥—ã—Ö–µ");
            } else if (!tomorrowSchedule.contains("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π")) {
                String reminder = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö!\n\n" +
                        tomorrowSchedule +
                        "\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è! üßò‚Äç‚ôÄÔ∏è";

                sendMessageToChannel(reminder);
                System.out.println("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏—è—Ö");
            } else {
                System.out.println("‚ÑπÔ∏è –ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è");
            }
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: " + e.getMessage());
        }
    }

    private String getTomorrowSchedule() {
        Calendar tomorrow = Calendar.getInstance();
        tomorrow.add(Calendar.DAY_OF_MONTH, 1);
        int tomorrowIndex = getDayOfWeekIndex(tomorrow);
        String[] day = SCHEDULE[tomorrowIndex];

        StringBuilder sb = new StringBuilder();
        sb.append("–ó–∞–≤—Ç—Ä–∞ (").append(day[0]).append("):\n\n");

        boolean hasClasses = false;

        if (!day[1].isEmpty() && !day[1].equals("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π")) {
            sb.append("‚Ä¢ ").append(day[1]).append("\n");
            hasClasses = true;
        }
        if (!day[2].isEmpty() && !day[2].equals("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π")) {
            sb.append("‚Ä¢ ").append(day[2]).append("\n");
            hasClasses = true;
        }

        if (!hasClasses) {
            sb.append("üéâ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ!!! –û—Ç–¥—ã—Ö - –¥—Ä—É–≥ —á–µ–ª–æ–≤–µ–∫–∞! üéâ\n");
            sb.append("–ó–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç, –º–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å! üò¥");
        }

        return sb.toString();
    }

    private void sendMessageToChannel(String text) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(CHANNEL_ID);
            message.setText(text);

            execute(message);
            System.out.println("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª");
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: " + e.getMessage());
        }
    }
}