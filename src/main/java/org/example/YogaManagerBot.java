package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

public class YogaManagerBot extends TelegramLongPollingBot {

    // –û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    private String[][] schedule = {
            {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å"},
            {"–í—Ç–æ—Ä–Ω–∏–∫", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "18:30-20:00 - –ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞ –ê—Ä–≥—É–Ω–æ–≤—Å–∫–æ–º"},
            {"–°—Ä–µ–¥–∞", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - –ú–∞–π—Å–æ—Ä-–∫–ª–∞—Å—Å"},
            {"–ß–µ—Ç–≤–µ—Ä–≥", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - –ú–∞–π—Å–æ—Ä-–∫–ª–∞—Å—Å"},
            {"–ü—è—Ç–Ω–∏—Ü–∞", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - –ú–∞–π—Å–æ—Ä-–∫–ª–∞—Å—Å"},
            {"–°—É–±–±–æ—Ç–∞", "–û–¢–î–´–•", ""},
            {"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "10:00-11:30 - LED-–∫–ª–∞—Å—Å", "11:30-12:00 - –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã)"}
    };

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    private String[] todaySpecial = null;
    private String[] tomorrowSpecial = null;

    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
    private final List<Long> adminUsers = List.of(639619404L);

    // –†–µ–∂–∏–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    private String editMode = null;
    private int currentEditDay = -1;

    @Override
    public String getBotUsername() {
        return "yoga_manager_bot";
    }

    @Override
    public String getBotToken() {
        String token = System.getenv("BOT_TOKEN");
        if (token == null || token.isEmpty()) {
            token = "dummy-token-for-testing";
            System.err.println("‚ö†Ô∏è BOT_TOKEN not set, using dummy token");
        }
        return token;
    }

    @Override
    public void onUpdateReceived(Update update) {
        System.out.println("üéØ Update received!");

        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                String messageText = update.getMessage().getText();
                long chatId = update.getMessage().getChatId();

                System.out.println("üì® Message: '" + messageText + "' from: " + chatId);

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if (editMode != null && isAdmin(chatId)) {
                    handleEditInput(chatId, messageText);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                handleMainCommands(chatId, messageText);
            }
        } catch (Exception e) {
            System.err.println("‚ùå Error processing message: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void handleMainCommands(long chatId, String messageText) throws TelegramApiException {
        switch (messageText) {
            case "/start":
                sendWelcomeMessage(chatId);
                break;
            case "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                sendFullSchedule(chatId);
                break;
            case "üìã –°–µ–≥–æ–¥–Ω—è":
                sendTodaySchedule(chatId);
                break;
            case "üìÜ –ó–∞–≤—Ç—Ä–∞":
                sendTomorrowSchedule(chatId);
                break;
            case "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
                if (isAdmin(chatId)) {
                    showManagementPanel(chatId);
                } else {
                    sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
                    sendWelcomeMessage(chatId);
                }
                break;
            case "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                if (isAdmin(chatId)) {
                    showScheduleEditor(chatId);
                }
                break;
            case "üïò –ò–∑–º–µ–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è":
                if (isAdmin(chatId)) {
                    startEditToday(chatId);
                }
                break;
            case "üïò –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞":
                if (isAdmin(chatId)) {
                    startEditTomorrow(chatId);
                }
                break;
            case "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è":
                if (isAdmin(chatId)) {
                    resetSpecialSchedules(chatId);
                }
                break;
            case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                sendWelcomeMessage(chatId);
                break;
            case "‚ùå –û—Ç–º–µ–Ω–∞":
                cancelEditing(chatId);
                break;
            case "‚ÑπÔ∏è –û –±–æ—Ç–µ":
                sendAboutMessage(chatId);
                break;
            default:
                // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –¥–Ω—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if (isAdmin(chatId) && messageText.matches("[1-7]")) {
                    int dayNum = Integer.parseInt(messageText);
                    startEditDay(chatId, dayNum - 1);
                } else {
                    sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:");
                }
        }
    }

    private boolean isAdmin(long chatId) {
        return adminUsers.contains(chatId);
    }

    private void showManagementPanel(long chatId) throws TelegramApiException {
        String text = "‚öôÔ∏è **–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º**\n\n" +
                "üìä **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:**\n" +
                "‚Ä¢ –°–µ–≥–æ–¥–Ω—è: " + (todaySpecial != null ? "üîÑ –ò–∑–º–µ–Ω–µ–Ω–æ" : "üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ") + "\n" +
                "‚Ä¢ –ó–∞–≤—Ç—Ä–∞: " + (tomorrowSpecial != null ? "üîÑ –ò–∑–º–µ–Ω–µ–Ω–æ" : "üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ") + "\n\n" +
                "üìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n" +
                "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n" +
                "‚Ä¢ üïò –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n" +
                "‚Ä¢ üïò –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n" +
                "‚Ä¢ üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è";

        sendMessageWithManagementKeyboard(chatId, text);
    }

    private void showScheduleEditor(long chatId) throws TelegramApiException {
        StringBuilder sb = new StringBuilder();
        sb.append("üìù **–†–µ–¥–∞–∫—Ç–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è**\n\n");
        sb.append("–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n");

        for (int i = 0; i < schedule.length; i++) {
            sb.append("**").append(i + 1).append(". ").append(schedule[i][0]).append("**\n");
            if (schedule[i][1].equals("–û–¢–î–´–•")) {
                sb.append("   üéâ –û–¢–î–´–•\n");
            } else {
                sb.append("   üïò ").append(schedule[i][1]).append("\n");
                if (!schedule[i][2].isEmpty()) {
                    sb.append("   üïò ").append(schedule[i][2]).append("\n");
                }
            }
            sb.append("\n");
        }

        sb.append("üìã **–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–Ω—è (1-7):**");

        editMode = "SELECT_DAY";
        sendMessageWithCancelKeyboard(chatId, sb.toString());
    }

    private void startEditDay(long chatId, int dayIndex) throws TelegramApiException {
        currentEditDay = dayIndex;
        editMode = "EDIT_DAY";

        String text = "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: " + schedule[dayIndex][0] + "**\n\n" +
                "üìã **–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**\n";

        if (schedule[dayIndex][1].equals("–û–¢–î–´–•")) {
            text += "üéâ –û–¢–î–´–•\n";
        } else {
            text += "üïò " + schedule[dayIndex][1] + "\n";
            if (!schedule[dayIndex][2].isEmpty()) {
                text += "üïò " + schedule[dayIndex][2] + "\n";
            }
        }

        text += "\nüìù **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**\n" +
                "‚Ä¢ –ö–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n" +
                "‚Ä¢ –î–ª—è –æ—Ç–¥—ã—Ö–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: **–û–¢–î–´–•**\n\n" +
                "üí° **–ü—Ä–∏–º–µ—Ä:**\n" +
                "9:00-12:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å\n" +
                "18:00-20:00 - –ü—Ä–∞–∫—Ç–∏–∫–∞";

        sendMessageWithCancelKeyboard(chatId, text);
    }

    private void startEditToday(long chatId) throws TelegramApiException {
        int todayIndex = getDayOfWeekIndex(Calendar.getInstance());
        String[] currentSchedule = todaySpecial != null ? todaySpecial : schedule[todayIndex];

        String text = "üïò **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –°–ï–ì–û–î–ù–Ø**\n\n" +
                "üìã **–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**\n";

        if (currentSchedule[1].equals("–û–¢–î–´–•")) {
            text += "üéâ –û–¢–î–´–•\n";
        } else {
            text += "üïò " + currentSchedule[1] + "\n";
            if (!currentSchedule[2].isEmpty()) {
                text += "üïò " + currentSchedule[2] + "\n";
            }
        }

        text += "\nüìù **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**\n" +
                "‚Ä¢ –ö–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n" +
                "‚Ä¢ –î–ª—è –æ—Ç–¥—ã—Ö–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: **–û–¢–î–´–•**";

        editMode = "EDIT_TODAY";
        sendMessageWithCancelKeyboard(chatId, text);
    }

    private void startEditTomorrow(long chatId) throws TelegramApiException {
        Calendar tomorrow = Calendar.getInstance();
        tomorrow.add(Calendar.DAY_OF_MONTH, 1);
        int tomorrowIndex = getDayOfWeekIndex(tomorrow);
        String[] currentSchedule = tomorrowSpecial != null ? tomorrowSpecial : schedule[tomorrowIndex];

        String text = "üïò **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –ó–ê–í–¢–†–ê**\n\n" +
                "üìã **–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**\n";

        if (currentSchedule[1].equals("–û–¢–î–´–•")) {
            text += "üéâ –û–¢–î–´–•\n";
        } else {
            text += "üïò " + currentSchedule[1] + "\n";
            if (!currentSchedule[2].isEmpty()) {
                text += "üïò " + currentSchedule[2] + "\n";
            }
        }

        text += "\nüìù **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**\n" +
                "‚Ä¢ –ö–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n" +
                "‚Ä¢ –î–ª—è –æ—Ç–¥—ã—Ö–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: **–û–¢–î–´–•**";

        editMode = "EDIT_TOMORROW";
        sendMessageWithCancelKeyboard(chatId, text);
    }

    private void handleEditInput(long chatId, String inputText) throws TelegramApiException {
        switch (editMode) {
            case "EDIT_DAY":
                saveDaySchedule(chatId, inputText);
                break;
            case "EDIT_TODAY":
                saveTodaySchedule(chatId, inputText);
                break;
            case "EDIT_TOMORROW":
                saveTomorrowSchedule(chatId, inputText);
                break;
            default:
                sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
                resetEditing();
                showManagementPanel(chatId);
        }
    }

    private void saveDaySchedule(long chatId, String inputText) throws TelegramApiException {
        if (inputText.equalsIgnoreCase("–û–¢–î–´–•")) {
            schedule[currentEditDay][1] = "–û–¢–î–´–•";
            schedule[currentEditDay][2] = "";
            sendMessage(chatId, "‚úÖ **" + schedule[currentEditDay][0] + "** —Ç–µ–ø–µ—Ä—å –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞! üéâ");
        } else {
            String[] lines = inputText.split("\n");
            if (lines.length > 0) {
                schedule[currentEditDay][1] = lines[0].trim();
                schedule[currentEditDay][2] = lines.length > 1 ? lines[1].trim() : "";
                sendMessage(chatId, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è **" + schedule[currentEditDay][0] + "** –æ–±–Ω–æ–≤–ª–µ–Ω–æ! üìù");
            }
        }
        resetEditing();
        showManagementPanel(chatId);
    }

    private void saveTodaySchedule(long chatId, String inputText) throws TelegramApiException {
        if (inputText.equalsIgnoreCase("–û–¢–î–´–•")) {
            todaySpecial = new String[]{"–°–µ–≥–æ–¥–Ω—è", "–û–¢–î–´–•", ""};
            sendMessage(chatId, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ **—Å–µ–≥–æ–¥–Ω—è** –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –û–¢–î–´–•! üéâ");
        } else {
            String[] lines = inputText.split("\n");
            if (lines.length > 0) {
                todaySpecial = new String[]{"–°–µ–≥–æ–¥–Ω—è", lines[0].trim(), lines.length > 1 ? lines[1].trim() : ""};
                sendMessage(chatId, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ **—Å–µ–≥–æ–¥–Ω—è** –æ–±–Ω–æ–≤–ª–µ–Ω–æ! üìù");
            }
        }
        resetEditing();
        showManagementPanel(chatId);
    }

    private void saveTomorrowSchedule(long chatId, String inputText) throws TelegramApiException {
        if (inputText.equalsIgnoreCase("–û–¢–î–´–•")) {
            tomorrowSpecial = new String[]{"–ó–∞–≤—Ç—Ä–∞", "–û–¢–î–´–•", ""};
            sendMessage(chatId, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ **–∑–∞–≤—Ç—Ä–∞** –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –û–¢–î–´–•! üéâ");
        } else {
            String[] lines = inputText.split("\n");
            if (lines.length > 0) {
                tomorrowSpecial = new String[]{"–ó–∞–≤—Ç—Ä–∞", lines[0].trim(), lines.length > 1 ? lines[1].trim() : ""};
                sendMessage(chatId, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ **–∑–∞–≤—Ç—Ä–∞** –æ–±–Ω–æ–≤–ª–µ–Ω–æ! üìù");
            }
        }
        resetEditing();
        showManagementPanel(chatId);
    }

    private void resetSpecialSchedules(long chatId) throws TelegramApiException {
        todaySpecial = null;
        tomorrowSpecial = null;
        sendMessage(chatId, "‚úÖ –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã! üîÑ\n–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.");
        showManagementPanel(chatId);
    }

    private void cancelEditing(long chatId) throws TelegramApiException {
        resetEditing();
        sendMessage(chatId, "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
        showManagementPanel(chatId);
    }

    private void resetEditing() {
        editMode = null;
        currentEditDay = -1;
    }

    private void sendWelcomeMessage(long chatId) throws TelegramApiException {
        String text = "üßò‚Äç‚ôÄÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ô–æ–≥–∞-–±–æ—Ç!**\n\n" +
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏–π:\n\n" +
                "üìÖ **–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:**\n" +
                "‚Ä¢ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n" +
                "‚Ä¢ –ó–∞–Ω—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n" +
                "‚Ä¢ –ó–∞–Ω—è—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n\n" +
                "‚öôÔ∏è **–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**\n" +
                "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n" +
                "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá";

        sendMessageWithKeyboard(chatId, text);
    }

    private void sendAboutMessage(long chatId) throws TelegramApiException {
        String text = "‚ÑπÔ∏è **–û –±–æ—Ç–µ**\n\n" +
                "–ô–æ–≥–∞-–±–æ—Ç v2.0\n\n" +
                "üìã **–§—É–Ω–∫—Ü–∏–∏:**\n" +
                "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π\n" +
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n" +
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)\n\n" +
                "‚ö° **–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤** –¥–æ—Å—Ç—É–ø–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.";

        sendMessage(chatId, text);
    }

    private void sendFullSchedule(long chatId) throws TelegramApiException {
        StringBuilder sb = new StringBuilder();
        sb.append("üìÖ **–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π**\n\n");

        for (String[] day : schedule) {
            sb.append("**").append(day[0]).append(":**\n");
            if (day[1].equals("–û–¢–î–´–•")) {
                sb.append("üéâ **–û–¢–î–´–•**\n");
            } else {
                sb.append("üïò ").append(day[1]).append("\n");
                if (!day[2].isEmpty()) {
                    sb.append("üïò ").append(day[2]).append("\n");
                }
            }
            sb.append("\n");
        }

        if (todaySpecial != null || tomorrowSpecial != null) {
            sb.append("‚ö° **–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n");
            if (todaySpecial != null) sb.append("‚Ä¢ –°–µ–≥–æ–¥–Ω—è: –∏–∑–º–µ–Ω–µ–Ω–æ\n");
            if (tomorrowSpecial != null) sb.append("‚Ä¢ –ó–∞–≤—Ç—Ä–∞: –∏–∑–º–µ–Ω–µ–Ω–æ\n");
        }

        sendMessage(chatId, sb.toString());
    }

    private void sendTodaySchedule(long chatId) throws TelegramApiException {
        int todayIndex = getDayOfWeekIndex(Calendar.getInstance());
        String[] todaySchedule = todaySpecial != null ? todaySpecial : schedule[todayIndex];

        StringBuilder sb = new StringBuilder();
        sb.append("üìã **–°–ï–ì–û–î–ù–Ø** (").append(todaySchedule[0]).append(")\n\n");

        if (todaySchedule[1].equals("–û–¢–î–´–•")) {
            sb.append("üéâ **–û–¢–î–´–•**\n\n");
            sb.append("–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–º –¥–Ω–µ–º! üåà");
        } else {
            sb.append("üïò ").append(todaySchedule[1]).append("\n");
            if (!todaySchedule[2].isEmpty()) {
                sb.append("üïò ").append(todaySchedule[2]).append("\n");
            }
        }

        if (todaySpecial != null) {
            sb.append("\n\n‚ö° *–í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ*");
        }

        sendMessage(chatId, sb.toString());
    }

    private void sendTomorrowSchedule(long chatId) throws TelegramApiException {
        Calendar tomorrow = Calendar.getInstance();
        tomorrow.add(Calendar.DAY_OF_MONTH, 1);
        int tomorrowIndex = getDayOfWeekIndex(tomorrow);
        String[] tomorrowSchedule = tomorrowSpecial != null ? tomorrowSpecial : schedule[tomorrowIndex];

        StringBuilder sb = new StringBuilder();
        sb.append("üìÜ **–ó–ê–í–¢–†–ê** (").append(tomorrowSchedule[0]).append(")\n\n");

        if (tomorrowSchedule[1].equals("–û–¢–î–´–•")) {
            sb.append("üéâ **–û–¢–î–´–•**\n\n");
            sb.append("–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –æ—Ç–¥—ã—Ö! üò¥");
        } else {
            sb.append("üïò ").append(tomorrowSchedule[1]).append("\n");
            if (!tomorrowSchedule[2].isEmpty()) {
                sb.append("üïò ").append(tomorrowSchedule[2]).append("\n");
            }
        }

        if (tomorrowSpecial != null) {
            sb.append("\n\n‚ö° *–í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ*");
        }

        sendMessage(chatId, sb.toString());
    }

    private int getDayOfWeekIndex(Calendar calendar) {
        int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
        return (dayOfWeek + 5) % 7;
    }

    private void sendMessage(long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setParseMode("Markdown");
        execute(message);
    }

    private void sendMessageWithKeyboard(long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(createMainKeyboard());
        message.setParseMode("Markdown");
        execute(message);
    }

    private void sendMessageWithManagementKeyboard(long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(createManagementKeyboard());
        message.setParseMode("Markdown");
        execute(message);
    }

    private void sendMessageWithCancelKeyboard(long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(createCancelKeyboard());
        message.setParseMode("Markdown");
        execute(message);
    }

    private ReplyKeyboardMarkup createMainKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
        row1.add("üìã –°–µ–≥–æ–¥–Ω—è");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üìÜ –ó–∞–≤—Ç—Ä–∞");
        row2.add("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("‚ÑπÔ∏è –û –±–æ—Ç–µ");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        return keyboardMarkup;
    }

    private ReplyKeyboardMarkup createManagementKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
        row1.add("üïò –ò–∑–º–µ–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üïò –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞");
        row2.add("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
        row3.add("‚ùå –û—Ç–º–µ–Ω–∞");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        return keyboardMarkup;
    }

    private ReplyKeyboardMarkup createCancelKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("‚ùå –û—Ç–º–µ–Ω–∞");

        keyboard.add(row1);

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        return keyboardMarkup;
    }

    @Override
    public void onUpdatesReceived(List<Update> updates) {
        for (Update update : updates) {
            onUpdateReceived(update);
        }
    }
}
git add src/main/java/org/example
git commit -m "–ö–û–†–†–ï–ö–¢–ò–†–û–í–û–ß–ö–ê –ö–ù–û–ü–û–ö –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–Ø"
git push origin main