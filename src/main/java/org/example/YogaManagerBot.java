package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

public class YogaManagerBot extends TelegramLongPollingBot {

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    private String[][] schedule = {
            {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å"},
            {"–í—Ç–æ—Ä–Ω–∏–∫", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "18:30-20:00 - –ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞ –ê—Ä–≥—É–Ω–æ–≤—Å–∫–æ–º"},
            {"–°—Ä–µ–¥–∞", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - –ú–∞–π—Å–æ—Ä-–∫–ª–∞—Å—Å"},
            {"–ß–µ—Ç–≤–µ—Ä–≥", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - –ú–∞–π—Å–æ—Ä-–∫–ª–∞—Å—Å"},
            {"–ü—è—Ç–Ω–∏—Ü–∞", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - –ú–∞–π—Å–æ—Ä-–∫–ª–∞—Å—Å"},
            {"–°—É–±–±–æ—Ç–∞", "–û–¢–î–´–•", ""},
            {"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "10:00-11:30 - LED-–∫–ª–∞—Å—Å", "11:30-12:00 - –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã)"}
    };

    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ ID —á–∞—Ç–æ–≤)
    private final List<Long> adminUsers = List.of(639619404L); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    private int editDayIndex = -1;
    private int editFieldIndex = -1;

    @Override
    public String getBotUsername() {
        return "yoga_manager_bot";
    }

    @Override
    public String getBotToken() {
        String token = System.getenv("BOT_TOKEN");
        if (token == null || token.isEmpty()) {
            token = "dummy-token-for-testing";
            System.err.println("‚ö†Ô∏è BOT_TOKEN not set, using dummy token");
        }
        return token;
    }

    @Override
    public void onUpdateReceived(Update update) {
        System.out.println("üéØ Update received!");

        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                String messageText = update.getMessage().getText();
                long chatId = update.getMessage().getChatId();
                String userName = update.getMessage().getFrom().getUserName();

                System.out.println("üì® Message: '" + messageText + "' from: @" + userName + " (" + chatId + ")");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if (editDayIndex != -1 && isAdmin(chatId)) {
                    handleScheduleEdit(chatId, messageText);
                    return;
                }

                // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                if (messageText.startsWith("/admin")) {
                    if (isAdmin(chatId)) {
                        handleAdminCommand(chatId, messageText);
                    } else {
                        sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
                    }
                    return;
                }

                // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                switch (messageText) {
                    case "/start":
                        sendWelcomeMessage(chatId);
                        break;
                    case "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                        sendFullSchedule(chatId);
                        break;
                    case "üìã –°–µ–≥–æ–¥–Ω—è":
                        sendTodaySchedule(chatId);
                        break;
                    case "üìÜ –ó–∞–≤—Ç—Ä–∞":
                        sendTomorrowSchedule(chatId);
                        break;
                    case "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
                        if (isAdmin(chatId)) {
                            showAdminPanel(chatId);
                        } else {
                            sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
                        }
                        break;
                    case "üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                        if (isAdmin(chatId)) {
                            resetToDefaultSchedule(chatId);
                        } else {
                            sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
                        }
                        break;
                    case "‚ùå –û—Ç–º–µ–Ω–∞":
                        cancelEditMode(chatId);
                        break;
                    case "‚ÑπÔ∏è –û –±–æ—Ç–µ":
                        sendAboutMessage(chatId);
                        break;
                    default:
                        if (isAdmin(chatId) && messageText.matches("\\d+")) {
                            handleDaySelection(chatId, messageText);
                        } else {
                            sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:");
                        }
                }

                System.out.println("‚úÖ Response sent successfully");
            }
        } catch (Exception e) {
            System.err.println("‚ùå Error processing message: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private boolean isAdmin(long chatId) {
        return adminUsers.contains(chatId);
    }

    private void handleAdminCommand(long chatId, String command) throws TelegramApiException {
        if (command.equals("/admin")) {
            showAdminPanel(chatId);
        } else if (command.equals("/admin_edit")) {
            showScheduleEditor(chatId);
        } else if (command.equals("/admin_reset")) {
            resetToDefaultSchedule(chatId);
        } else {
            sendMessage(chatId, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                    "/admin - –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n" +
                    "/admin_edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n" +
                    "/admin_reset - —Å–±—Ä–æ—Å–∏—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É");
        }
    }

    private void showAdminPanel(long chatId) throws TelegramApiException {
        String text = "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n" +
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n" +
                "‚Ä¢ üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n" +
                "‚Ä¢ üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É\n" +
                "‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/admin_edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n" +
                "/admin_reset - —Å–±—Ä–æ—Å–∏—Ç—å";

        sendMessageWithAdminKeyboard(chatId, text);
    }

    private void showScheduleEditor(long chatId) throws TelegramApiException {
        StringBuilder sb = new StringBuilder();
        sb.append("üìù –†–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n\n");
        sb.append("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n");

        for (int i = 0; i < schedule.length; i++) {
            sb.append(i + 1).append(". ").append(schedule[i][0]).append(":\n");
            if (!schedule[i][1].isEmpty()) sb.append("   üïò ").append(schedule[i][1]).append("\n");
            if (!schedule[i][2].isEmpty()) sb.append("   üïò ").append(schedule[i][2]).append("\n");
            sb.append("\n");
        }

        sb.append("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–Ω—è (1-7) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:");

        sendMessageWithAdminKeyboard(chatId, sb.toString());
    }

    private void handleDaySelection(long chatId, String dayNumber) throws TelegramApiException {
        try {
            int dayIndex = Integer.parseInt(dayNumber) - 1;
            if (dayIndex >= 0 && dayIndex < schedule.length) {
                showDayEditOptions(chatId, dayIndex);
            } else {
                sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7");
            }
        } catch (NumberFormatException e) {
            sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7");
        }
    }

    private void showDayEditOptions(long chatId, int dayIndex) throws TelegramApiException {
        editDayIndex = dayIndex;

        StringBuilder sb = new StringBuilder();
        sb.append("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ").append(schedule[dayIndex][0]).append("\n\n");
        sb.append("–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n");

        if (!schedule[dayIndex][1].isEmpty()) {
            sb.append("1. üïò ").append(schedule[dayIndex][1]).append("\n");
        } else {
            sb.append("1. [–ø—É—Å—Ç–æ]\n");
        }

        if (!schedule[dayIndex][2].isEmpty()) {
            sb.append("2. üïò ").append(schedule[dayIndex][2]).append("\n");
        } else {
            sb.append("2. [–ø—É—Å—Ç–æ]\n");
        }

        sb.append("\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:\n");
        sb.append("‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ '1' –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è\n");
        sb.append("‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ '2' –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è\n");
        sb.append("‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ '0' –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ '–û–¢–î–´–•'\n");
        sb.append("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –æ—Ç–º–µ–Ω—ã");

        sendMessageWithCancelKeyboard(chatId, sb.toString());
    }

    private void handleScheduleEdit(long chatId, String messageText) throws TelegramApiException {
        if (messageText.equals("1") || messageText.equals("2")) {
            editFieldIndex = Integer.parseInt(messageText) - 1;
            sendMessageWithCancelKeyboard(chatId, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è " + messageText +
                    ":\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: '8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å')\n\n–¢–µ–∫—É—â–µ–µ: " +
                    (schedule[editDayIndex][editFieldIndex].isEmpty() ? "[–ø—É—Å—Ç–æ]" : schedule[editDayIndex][editFieldIndex]));
        }
        else if (messageText.equals("0")) {
            // –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –æ—Ç–¥—ã—Ö
            schedule[editDayIndex][0] = getDayName(editDayIndex); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è
            schedule[editDayIndex][1] = "–û–¢–î–´–•";
            schedule[editDayIndex][2] = "";

            sendMessage(chatId, "‚úÖ " + schedule[editDayIndex][0] + " –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞!");
            resetEditMode();
            showScheduleEditor(chatId);
        }
        else if (editFieldIndex != -1) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            schedule[editDayIndex][editFieldIndex] = messageText;

            sendMessage(chatId, "‚úÖ –ó–∞–Ω—è—Ç–∏–µ " + (editFieldIndex + 1) + " –¥–ª—è " +
                    schedule[editDayIndex][0] + " –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
            resetEditMode();
            showScheduleEditor(chatId);
        }
        else {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1, 2, 0 –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");
        }
    }

    private void cancelEditMode(long chatId) throws TelegramApiException {
        resetEditMode();
        sendMessage(chatId, "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
        showAdminPanel(chatId);
    }

    private void resetEditMode() {
        editDayIndex = -1;
        editFieldIndex = -1;
    }

    private void resetToDefaultSchedule(long chatId) throws TelegramApiException {
        schedule = new String[][]{
                {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å"},
                {"–í—Ç–æ—Ä–Ω–∏–∫", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "18:30-20:00 - –ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞ –ê—Ä–≥—É–Ω–æ–≤—Å–∫–æ–º"},
                {"–°—Ä–µ–¥–∞", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - –ú–∞–π—Å–æ—Ä-–∫–ª–∞—Å—Å"},
                {"–ß–µ—Ç–≤–µ—Ä–≥", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - –ú–∞–π—Å–æ—Ä-–∫–ª–∞—Å—Å"},
                {"–ü—è—Ç–Ω–∏—Ü–∞", "8:00-11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å", "17:00-20:30 - –ú–∞–π—Å–æ—Ä-–∫–ª–∞—Å—Å"},
                {"–°—É–±–±–æ—Ç–∞", "–û–¢–î–´–•", ""},
                {"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "10:00-11:30 - LED-–∫–ª–∞—Å—Å", "11:30-12:00 - –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã)"}
        };

        sendMessage(chatId, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É!");
        showScheduleEditor(chatId);
    }

    private String getDayName(int dayIndex) {
        String[] dayNames = {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"};
        return dayNames[dayIndex];
    }

    private void sendWelcomeMessage(long chatId) throws TelegramApiException {
        String text = "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –π–æ–≥–∞-–∑–∞–Ω—è—Ç–∏–π! üßò‚Äç‚ôÄÔ∏è\n\n" +
                "–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å:\n" +
                "‚Ä¢ üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\n" +
                "‚Ä¢ üìã –£–∑–Ω–∞—Ç—å –æ –∑–∞–Ω—è—Ç–∏—è—Ö —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞\n" +
                "‚Ä¢ ‚öôÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n\n" +
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:";
        sendMessageWithKeyboard(chatId, text);
    }

    private void sendAboutMessage(long chatId) throws TelegramApiException {
        String text = "‚ÑπÔ∏è –û –±–æ—Ç–µ\n\n" +
                "–ô–æ–≥–∞-–±–æ—Ç v2.0\n" +
                "–§—É–Ω–∫—Ü–∏–∏:\n" +
                "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π\n" +
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n" +
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)\n\n" +
                "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –π–æ–≥–∞-–ø—Ä–∞–∫—Ç–∏–∫–∏.";
        sendMessage(chatId, text);
    }

    private void sendFullSchedule(long chatId) throws TelegramApiException {
        StringBuilder sb = new StringBuilder();
        sb.append("üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n\n");

        for (String[] day : schedule) {
            sb.append("**").append(day[0]).append(":**\n");
            if (!day[1].isEmpty() && !day[1].equals("–û–¢–î–´–•")) {
                sb.append("‚Ä¢ üïò ").append(day[1]).append("\n");
            }
            if (!day[2].isEmpty() && !day[2].equals("–û–¢–î–´–•")) {
                sb.append("‚Ä¢ üïò ").append(day[2]).append("\n");
            }
            if (day[1].equals("–û–¢–î–´–•")) {
                sb.append("‚Ä¢ üéâ –û–¢–î–´–•\n");
            }
            sb.append("\n");
        }

        sendMessage(chatId, sb.toString());
    }

    private void sendTodaySchedule(long chatId) throws TelegramApiException {
        int todayIndex = getDayOfWeekIndex(Calendar.getInstance());
        String scheduleText = formatDaySchedule(todayIndex);
        String message = "üìã –°–µ–≥–æ–¥–Ω—è (" + schedule[todayIndex][0] + "):\n\n" + scheduleText;
        sendMessage(chatId, message);
    }

    private void sendTomorrowSchedule(long chatId) throws TelegramApiException {
        Calendar tomorrow = Calendar.getInstance();
        tomorrow.add(Calendar.DAY_OF_MONTH, 1);
        int tomorrowIndex = getDayOfWeekIndex(tomorrow);
        String scheduleText = formatDaySchedule(tomorrowIndex);
        String message = "üìÜ –ó–∞–≤—Ç—Ä–∞ (" + schedule[tomorrowIndex][0] + "):\n\n" + scheduleText;
        sendMessage(chatId, message);
    }

    private String formatDaySchedule(int dayIndex) {
        String[] day = schedule[dayIndex];
        StringBuilder sb = new StringBuilder();

        if (!day[1].isEmpty() && !day[1].equals("–û–¢–î–´–•")) {
            sb.append("‚Ä¢ üïò ").append(day[1]).append("\n");
        }
        if (!day[2].isEmpty() && !day[2].equals("–û–¢–î–´–•")) {
            sb.append("‚Ä¢ üïò ").append(day[2]).append("\n");
        }
        if (day[1].equals("–û–¢–î–´–•")) {
            sb.append("‚Ä¢ üéâ –û–¢–î–´–• - –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–º –¥–Ω–µ–º!\n");
        }

        return sb.toString();
    }

    private int getDayOfWeekIndex(Calendar calendar) {
        int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
        return (dayOfWeek + 5) % 7; // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 0, –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 1, etc.
    }

    private void sendMessage(long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setParseMode("Markdown");
        execute(message);
    }

    private void sendMessageWithKeyboard(long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(createMainKeyboard());
        message.setParseMode("Markdown");
        execute(message);
    }

    private void sendMessageWithAdminKeyboard(long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(createAdminKeyboard());
        message.setParseMode("Markdown");
        execute(message);
    }

    private void sendMessageWithCancelKeyboard(long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(createCancelKeyboard());
        message.setParseMode("Markdown");
        execute(message);
    }

    private ReplyKeyboardMarkup createMainKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
        row1.add("üìã –°–µ–≥–æ–¥–Ω—è");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üìÜ –ó–∞–≤—Ç—Ä–∞");
        row2.add("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("‚ÑπÔ∏è –û –±–æ—Ç–µ");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        return keyboardMarkup;
    }

    private ReplyKeyboardMarkup createAdminKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
        row1.add("üîÑ –°–±—Ä–æ—Å–∏—Ç—å");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
        row2.add("üìã –°–µ–≥–æ–¥–Ω—è");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("üìÜ –ó–∞–≤—Ç—Ä–∞");
        row3.add("‚ùå –û—Ç–º–µ–Ω–∞");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        return keyboardMarkup;
    }

    private ReplyKeyboardMarkup createCancelKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("‚ùå –û—Ç–º–µ–Ω–∞");

        keyboard.add(row1);

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        return keyboardMarkup;
    }

    @Override
    public void onUpdatesReceived(List<Update> updates) {
        for (Update update : updates) {
            onUpdateReceived(update);
        }
    }
}